 * 1. Подключиться к базе данных world (которая находится на удаленном сервере). */



USE world;



* 2. Посмотреть на таблицы city, country из базы world. В каждой таблице есть поле название (Name) и население (Population). 



   Поле Name в одной таблице означает название города, а в другой - название страны. Написать запрос с помощью UNION, 



   который выводит список названий всех городов и стран с их населением. Итоговая выборка должна содержать два столбца: 



   Name, Population. */



SELECT Name, Population FROM city UNION SELECT Name, Population FROM country;







/* 3. Посмотреть на таблицы в базе world и объяснить ограничения нескольких столбцов - ответить 1 предложением. */



В таблице city поле ID является первичным ключом и уникальным, а в таблице country поле Code является первичным ключом и уникальным.







/* 4. Далее работаем на локальном сервере. Создать новую таблицу citizen, которая содержит следующие поля: уникальное автоинкрементное, номер соц страхования, имя, фамилию и емейл. */



CREATE TABLE citizen_4 ( 



    id INT AUTO_INCREMENT PRIMARY KEY, 



    social_security_number VARCHAR(255) UNIQUE, 



    firstname VARCHAR(255) NOT NULL, 



    lastname VARCHAR(255) NOT NULL, 



    email VARCHAR(255) UNIQUE 



);



SELECT * FROM citizen_4;







/* 5. На вашем локальном сервере в любой базе создать таблицу без ограничений (любую, можно взять с урока). */



CREATE TABLE example_table ( 



    id INT AUTO_INCREMENT PRIMARY KEY, 



    firstname VARCHAR(255), 



    lastname VARCHAR(255) 



);



SELECT * FROM example_table;







/* 6. Добавить в таблицу 5 значений. Добавить 3 человека с одинаковыми именами и 2 человека без lastname */



INSERT INTO example_table (firstname, lastname) 



	VALUES 



 		('John', 'Doe'), 



                ('John', NULL), 



                ('John', 'Smith'), 



                ('Jane', NULL), 



                ('Alice', 'Johnson');



SELECT * FROM example_table;







/* 7. Использовать оператор alter table … modify , чтобы добавить ограничение not null на поле firstname и lastname. */



ALTER TABLE example_table 



MODIFY firstname VARCHAR(255) NOT NULL, 



MODIFY lastname VARCHAR(255) NOT NULL;



SELECT * FROM example_table;







/* 8. Добавить ограничение unique для пары firstname\lastname.  */



ALTER TABLE example_table 



ADD CONSTRAINT unique_name 



UNIQUE (firstname, lastname);



SELECT * FROM example_table;







/* 9. Удалить таблицу из базы и пересоздать ее, модифицировав запрос add table так, чтобы он учитывал ограничения (см примеры из класса). */



DROP TABLE IF EXISTS example_table; 



CREATE TABLE example_table ( 



id INT AUTO_INCREMENT PRIMARY KEY, 



firstname VARCHAR(255) NOT NULL, 



lastname VARCHAR(255) NOT NULL, 



UNIQUE (firstname, lastname) 



); 







/* Добавление данных */



INSERT INTO example_table (firstname, lastname) 



 	VALUES 



 		('John', 'Doe'), 



                ('John', 'Smith'), 



                ('Jane', 'Doe'), 



                ('Alice', 'Johnson');



SELECT * FROM example_table;







/* 10. Добавить правильные и неправильные данные (нарушающие и не нарушающие ограничения). */



-- Правильные данные 



INSERT INTO example_table (firstname, lastname) VALUES ('Mary', 'Smith'); 



SELECT * FROM example_table;







/* Неправильные данные (нарушающие ограничения) */



-- Вставка дубликата. Нарушает UNIQUE ограничение 



-- INSERT INTO example_table (firstname, lastname) 



-- VALUES ('John', 'Doe'); 







-- Вставка NULL значения. Нарушает NOT NULL ограничение для lastname 



-- INSERT INTO example_table (firstname) VALUES ('Bob');

